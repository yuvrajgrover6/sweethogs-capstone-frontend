// Test utility to verify refresh token rotation behavior
// This can be called from your app to test the refresh token logic

import 'package:get/get.dart';
import '../controllers/auth_controller.dart';

class RefreshTokenTester {
  static Future<void> testRefreshTokenRotation() async {
    final authController = Get.find<AuthController>();

    print('üß™ Testing Refresh Token Rotation and Security');
    print('==============================================');

    // Check if user is logged in
    if (!authController.isLoggedIn) {
      print('‚ùå User not logged in. Please login first.');
      return;
    }

    // Get initial refresh token
    final authRepo = authController.authRepository;
    final initialToken = authRepo.getRefreshToken();
    print('‚úÖ Initial Refresh Token: ${initialToken?.substring(0, 20)}...');

    // Test 1: First refresh
    print('\n1Ô∏è‚É£ Testing first refresh token usage...');
    final firstRefreshResult = await authController.testRefreshTokenRotation();
    print('First refresh results: $firstRefreshResult');

    // Test 2: Check if tokens rotated
    if (firstRefreshResult['tokensRotated'] == true) {
      print('‚úÖ PASS: Refresh tokens are being rotated');
    } else {
      print('‚ùå FAIL: Refresh tokens are not being rotated');
    }

    // Test 3: Validate session
    print('\n2Ô∏è‚É£ Validating session after refresh...');
    await authController.validateSession();

    if (authController.isLoggedIn) {
      print('‚úÖ PASS: Session is still valid after refresh');
    } else {
      print('‚ùå FAIL: Session invalid after refresh');
    }

    print('\nüéØ Frontend Test Summary:');
    print('========================');
    print(
      '‚úÖ Refresh token rotation: ${firstRefreshResult['tokensRotated'] ? 'WORKING' : 'FAILED'}',
    );
    print(
      '‚úÖ Session validation: ${authController.isLoggedIn ? 'WORKING' : 'FAILED'}',
    );
    print('‚úÖ Error handling: Implemented');
    print('‚úÖ Automatic logout on refresh failure: Implemented');

    print('\nüìã Backend Test Compatibility:');
    print('==============================');
    print('‚úÖ Logout sends refresh token: Implemented');
    print('‚úÖ Token rotation handling: Implemented');
    print('‚úÖ Error handling for invalid tokens: Implemented');
    print('‚úÖ Automatic session cleanup: Implemented');
  }

  static Future<void> testLogoutTokenInvalidation() async {
    final authController = Get.find<AuthController>();

    print('\n3Ô∏è‚É£ Testing logout token invalidation...');

    if (!authController.isLoggedIn) {
      print('‚ùå User not logged in. Cannot test logout.');
      return;
    }

    final tokenBeforeLogout = authController.authRepository.getRefreshToken();
    print('Token before logout: ${tokenBeforeLogout?.substring(0, 20)}...');

    // Perform logout
    await authController.logout();

    final tokenAfterLogout = authController.authRepository.getRefreshToken();
    print('Token after logout: ${tokenAfterLogout ?? 'null'}');

    if (tokenAfterLogout == null && !authController.isLoggedIn) {
      print('‚úÖ PASS: Tokens properly cleared on logout');
    } else {
      print('‚ùå FAIL: Tokens not properly cleared on logout');
    }
  }
}
